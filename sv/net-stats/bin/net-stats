#!/usr/bin/python

## tkooda : 2007-10-22 : poll remote machine for network stats and save into RRD DBs

import sys
import socket
import time
import os
import subprocess
import re



def get_stats( host, prefix ):
	try:
		sock_stats = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
		sock_stats.connect( ( host, int( settings[ "PORT" ] ) ) )
		data_stats = sock_stats.recv( 4096 )
		sock_stats.close()
	except:
		import traceback
		traceback.print_exc( file=sys.stderr )
		sys.stderr.flush()
		sys.exit( 3 )
	
	stats = {}
	for line in data_stats.split( "\n" ):
		try:
			dev, txrx, bytes = pattern.match( line ).groups()

			if prefix:
				prefix_match = False
				for p in prefix.split():
					if dev.startswith( prefix ):
						prefix_match = True
				
				if not prefix_match:
					continue
			
			if not dev in stats:
				stats[ dev ] = {}
			
			stats[ dev ][ txrx ] = bytes
		except:
			pass # e.g. end of input
	
	return stats



def do_create_rrd( path_file ):
	if os.path.isfile( path_file ):
		return True
# note: create rrd to hold (up to 100Mbit/s) max bytes transfered in 1 minute
# math: (100 * 1024 * 1024 / 8 * 60) = 786432000 bytes in 1min @ 100Mbit/s
# buckets:
#   900 samples every  1 minutes  (covers 15 hours)
# 12960 samples every  5 minutes  (covers 1.5 months; for 95th% @ 5min)
#   534 samples every  1 day      (covers 1.5 year)
# result: data.rrd is only 214K
	cmd = [ "/usr/bin/rrdtool", "create", path_file, "--step", "60",
		"DS:rx:COUNTER:120:0:786432000",
		"DS:tx:COUNTER:120:0:786432000",
		"RRA:AVERAGE:0.5:1:900",
		"RRA:AVERAGE:0.5:5:12960",
		"RRA:AVERAGE:0.5:1440:534",
		]
	subprocess.call( cmd )
	return False # no error




# set defaults ..
settings = {
	"HOSTS" : "127.0.0.1",
	"PORT"  : 1429,
	"DOCROOT" : "/etc/sv/net-stats/root",
	"PREFIX" : "",
}

pattern = re.compile(  "^/sys/class/net/([^/]+)/statistics/(.*)_bytes:(\d+)$" )

## optionally override defaults ..
for s in settings.keys():
	e = os.getenv( s )
	if e:
		settings[ s ] = e


## main() loop ..
while True:
	for host in settings[ "HOSTS" ].split(" "):
		for dev, ios in get_stats( host, settings[ "PREFIX" ] ).items():
			if len( ios ) != 2:
				print >>sys.stderr, "ERROR: incomplete rx/tx:", dev, ios
				continue
			path_dir = os.path.join( settings[ "DOCROOT" ], host )
			if not os.path.isdir( path_dir ):
				os.makedirs( path_dir )
			path_file = os.path.join( path_dir, "%s.rrd" % dev )
			if not os.path.isfile( path_file ):
				if not do_create_rrd( path_file ):
					continue
			print "update %s N:%s:%s" % ( path_file, ios[ "tx" ], ios[ "rx" ] )
		sys.stdout.flush()
	time.sleep( 6 )
